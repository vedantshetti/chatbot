{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vedan\\\\OneDrive\\\\Desktop\\\\chatbot\\\\frontend\\\\src\\\\components\\\\VoiceChatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ReactMic } from 'react-mic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceChatbot = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [blobURL, setBlobURL] = useState(null);\n  const startRecording = () => {\n    setRecording(true);\n  };\n  const stopRecording = async () => {\n    setRecording(false);\n  };\n  const onData = recordedBlob => {\n    console.log('chunk of real-time data is: ', recordedBlob);\n  };\n  const onStop = async recordedBlob => {\n    console.log('recordedBlob is: ', recordedBlob);\n    setBlobURL(URL.createObjectURL(recordedBlob.blob));\n    const formData = new FormData();\n    formData.append('audio', recordedBlob.blob);\n    try {\n      const response = await fetch('http://localhost:5000/speech-to-text', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const audioData = await response.blob();\n      const audioUrl = URL.createObjectURL(audioData);\n      const audio = new Audio(audioUrl);\n      audio.play();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voice Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactMic, {\n      record: recording,\n      className: \"sound-wave\",\n      onStop: onStop,\n      onData: onData,\n      strokeColor: \"#000000\",\n      backgroundColor: \"#FF4081\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        type: \"button\",\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        type: \"button\",\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), blobURL && /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: blobURL,\n      controls: \"controls\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceChatbot, \"h/POWsjY4JeaQ7cP80m+kQTgpbI=\");\n_c = VoiceChatbot;\nexport default VoiceChatbot;\nvar _c;\n$RefreshReg$(_c, \"VoiceChatbot\");","map":{"version":3,"names":["React","useState","ReactMic","jsxDEV","_jsxDEV","VoiceChatbot","_s","recording","setRecording","blobURL","setBlobURL","startRecording","stopRecording","onData","recordedBlob","console","log","onStop","URL","createObjectURL","blob","formData","FormData","append","response","fetch","method","body","ok","Error","audioData","audioUrl","audio","Audio","play","error","children","fileName","_jsxFileName","lineNumber","columnNumber","record","className","strokeColor","backgroundColor","onClick","type","src","controls","_c","$RefreshReg$"],"sources":["C:/Users/vedan/OneDrive/Desktop/chatbot/frontend/src/components/VoiceChatbot.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ReactMic } from 'react-mic';\r\n\r\nconst VoiceChatbot = () => {\r\n  const [recording, setRecording] = useState(false);\r\n  const [blobURL, setBlobURL] = useState(null);\r\n\r\n  const startRecording = () => {\r\n    setRecording(true);\r\n  };\r\n\r\n  const stopRecording = async () => {\r\n    setRecording(false);\r\n  };\r\n\r\n  const onData = (recordedBlob) => {\r\n    console.log('chunk of real-time data is: ', recordedBlob);\r\n  };\r\n\r\n  const onStop = async (recordedBlob) => {\r\n    console.log('recordedBlob is: ', recordedBlob);\r\n    setBlobURL(URL.createObjectURL(recordedBlob.blob));\r\n\r\n    const formData = new FormData();\r\n    formData.append('audio', recordedBlob.blob);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/speech-to-text', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const audioData = await response.blob();\r\n      const audioUrl = URL.createObjectURL(audioData);\r\n\r\n      const audio = new Audio(audioUrl);\r\n      audio.play();\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Voice Chatbot</h1>\r\n      <ReactMic\r\n        record={recording}\r\n        className=\"sound-wave\"\r\n        onStop={onStop}\r\n        onData={onData}\r\n        strokeColor=\"#000000\"\r\n        backgroundColor=\"#FF4081\"\r\n      />\r\n      <div>\r\n        <button onClick={startRecording} type=\"button\">\r\n          Start Recording\r\n        </button>\r\n        <button onClick={stopRecording} type=\"button\">\r\n          Stop Recording\r\n        </button>\r\n      </div>\r\n      {blobURL && <audio src={blobURL} controls=\"controls\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VoiceChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}